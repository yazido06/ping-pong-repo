name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CONTAINER_NAME: ping-pong-api
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/$CONTAINER_NAME
  API_REPO: https://github.com/alexwalling/ping-pong-api.git
  GKE_CLUSTER_NAME: ping-pong-cluster
  GKE_REGION: europe-west1
  DOMAIN: ping-pong.yazidgoghrod.com

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Clone API Repository
        run: |
          git clone ${{ env.API_REPO }} src/ping-pong-api

      # The following steps are commented out. As your software grows more complex,
      # it's good practice to build and run tests outside Docker before building the image.
      # This helps catch issues early and ensures code quality.
      #
      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20.x'
      #     cache: 'npm'
      #     cache-dependency-path: 'src/ping-pong-api/package-lock.json'
      #
      # - name: Update npm
      #   working-directory: src/ping-pong-api
      #   run: npm install -g npm@latest
      #
      # - name: Install dependencies
      #   working-directory: src/ping-pong-api
      #   run: npm install --no-optional --no-audit --no-fund --no-package-lock
      #
      # - name: Run tests
      #   working-directory: src/ping-pong-api
      #   run: npm test

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3

      - name: Clone API Repository
        run: |
          git clone ${{ env.API_REPO }} src/ping-pong-api

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f docker/Dockerfile .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          rm /tmp/gcp-key.json

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} \
            --region ${{ env.GKE_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          cd kubernetes/helm/ping-pong
          helm upgrade --install ping-pong . \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set ingress.enabled=true \
            --set ingress.host=${{ env.DOMAIN }} \
            --namespace ping-pong \
            --create-namespace